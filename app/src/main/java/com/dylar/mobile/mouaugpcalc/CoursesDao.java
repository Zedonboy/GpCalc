package com.dylar.mobile.mouaugpcalc;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSES".
*/
public class CoursesDao extends AbstractDao<Courses, Void> {

    public static final String TABLENAME = "COURSES";

    /**
     * Properties of entity Courses.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Level = new Property(0, String.class, "level", false, "LEVEL");
        public final static Property Semester = new Property(1, String.class, "semester", false, "SEMESTER");
        public final static Property Subject = new Property(2, String.class, "subject", false, "SUBJECT");
        public final static Property Grade = new Property(3, String.class, "grade", false, "GRADE");
        public final static Property UnitLoad = new Property(4, int.class, "unitLoad", false, "UNIT_LOAD");
    }


    public CoursesDao(DaoConfig config) {
        super(config);
    }
    
    public CoursesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSES\" (" + //
                "\"LEVEL\" TEXT," + // 0: level
                "\"SEMESTER\" TEXT," + // 1: semester
                "\"SUBJECT\" TEXT," + // 2: subject
                "\"GRADE\" TEXT," + // 3: grade
                "\"UNIT_LOAD\" INTEGER NOT NULL );"); // 4: unitLoad
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_COURSES_LEVEL ON \"COURSES\"" +
                " (\"LEVEL\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_COURSES_SEMESTER ON \"COURSES\"" +
                " (\"SEMESTER\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Courses entity) {
        stmt.clearBindings();
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(1, level);
        }
 
        String semester = entity.getSemester();
        if (semester != null) {
            stmt.bindString(2, semester);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(3, subject);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(4, grade);
        }
        stmt.bindLong(5, entity.getUnitLoad());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Courses entity) {
        stmt.clearBindings();
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(1, level);
        }
 
        String semester = entity.getSemester();
        if (semester != null) {
            stmt.bindString(2, semester);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(3, subject);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(4, grade);
        }
        stmt.bindLong(5, entity.getUnitLoad());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Courses readEntity(Cursor cursor, int offset) {
        Courses entity = new Courses( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // level
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // semester
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // subject
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // grade
            cursor.getInt(offset + 4) // unitLoad
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Courses entity, int offset) {
        entity.setLevel(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSemester(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSubject(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGrade(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitLoad(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Courses entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Courses entity) {
        return null;
    }

    @Override
    public boolean hasKey(Courses entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
